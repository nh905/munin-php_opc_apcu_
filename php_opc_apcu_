#!/usr/bin/perl
#
# Magic markers:
#%# family=auto
#%# capabilities=autoconf

# adapted from php_apcu_
# interface with opc_apcu_info.php on target servers - returns OpCache and APCU statistics
# original cache value names retained if possible
# OpCache differences:
#  - 
# APCU differences: 
#  - all value names prefixed by 'user_'
#  - new graphs: 

use strict;
use Munin::Plugin;

need_multigraph();

my $ret = undef;

if (! eval "require LWP::UserAgent;")
{
	$ret = "LWP::UserAgent not found";
}

my $URL = exists $ENV{'url'} ? $ENV{'url'} : "http://127.0.0.1:%d/opc_apcu_info.php?auto";
my @PORTS = exists $ENV{'ports'} ? split(' ', $ENV{'ports'}) : (80);

if ( defined $ARGV[0] and $ARGV[0] eq "autoconf" )
{
	if ($ret)
	{
		print "no ($ret)\n";
		exit 1;
	}

	my $ua = LWP::UserAgent->new(timeout => 30,
                   agent => sprintf("munin/%s (libwww-perl/%s)", $Munin::Common::Defaults::MUNIN_VERSION, $LWP::VERSION));

	my @badports;
	foreach my $port (@PORTS) {
		my $url = sprintf $URL, $port;
		my $response = $ua->request(HTTP::Request->new('GET',$url));
		push @badports, $port unless $response->is_success and $response->content =~ /^mode: /im;
	}
	if (@badports) {
		print "no (opc_apcu-status)\n";
		exit 1;
	} else {
		print "yes\n";
		exit 0;
	}
}

if ( defined $ARGV[0] and $ARGV[0] eq "config" )
{
$0 =~ /php_opc_apcu([^_]+)?_(.+)*/;
my $custom_name = $1;
my $plugin = $2;

## PHP OpCache Usage
if($plugin eq 'usage') {
print("multigraph php_opc_apcu$custom_name\_usage
graph_title $custom_name OpCache Usage
graph_args --base 1024 -l 0
graph_vlabel Bytes
graph_category php-opcache
graph_order used free
graph_total Total
used.label Used Memory
used.draw AREASTACK
fragmented.label Fragmented Memory
fragmented.draw AREASTACK
free.label Available Memory
free.draw AREASTACK
");
}

## PHP OpCache Memory Size
if($plugin eq 'mem_size') {
print("multigraph php_opc_apcu$custom_name\_mem_size
graph_title $custom_name OpCache Used Memory 
graph_args --base 1024 -l 0
graph_vlabel Bytes
graph_category php-opcache
graph_total Total
optcode_size.label Optcode Cache
optcode_size.draw AREASTACK
user_size.label User Cache
user_size.draw AREASTACK
free.label Available Memory
free.draw AREASTACK
");
}

## PHP OpCache User Memory Only
if($plugin eq 'user_mem_size') {
print("multigraph php_opc_apcu$custom_name\_user_mem_size
graph_title $custom_name APCU Used Memory 
graph_args --base 1024 -l 0
graph_vlabel Bytes
graph_category php-opcache
graph_total Total
user_size.label User Cache
user_size.draw AREASTACK
free.label Available Memory
free.draw AREASTACK
");
}


## PHP OpCache Hit / Miss by percentage
elsif($plugin eq 'hit_miss') {
print("multigraph php_opc_apcu$custom_name\_hit_miss
graph_title $custom_name OpCache Hits / Misses
graph_args --base 1000 --lower-limit 0 --upper-limit 100 --rigid
graph_vlabel Percent
graph_category php-opcache
graph_total Total
hits.label Hits
hits.draw AREA
hits.min 0
misses.label Misses
misses.draw STACK
misses.min 0
misses.warning 50
");
}

## PHP OpCache Purge rate (# Entries / Inserts)
elsif($plugin eq 'purge') {
print("multigraph php_opc_apcu$custom_name\_purge
graph_title $custom_name OpCache/APCU Purge rate 
graph_args --base 1000 --lower-limit 0 --upper-limit 100 --rigid
graph_vlabel Percent
graph_category php-opcache
purge_rate.label Optcode Cache
purge_rate.draw LINE2
purge_rate.min 0
purge_rate.warning 10
user_purge_rate.label User Cache
user_purge_rate.draw LINE2
user_purge_rate.min 0
user_purge_rate.warning 10
");
}

## PHP OpCache User Purge rate (# Entries / Inserts) Only
elsif($plugin eq 'user_purge') {
print("multigraph php_opc_apcu$custom_name\_user_purge
graph_title $custom_name APCU Purge rate 
graph_args --base 1000 --lower-limit 0 --upper-limit 100 --rigid
graph_vlabel Percent
graph_category php-opcache
user_purge_rate.label User Cache
user_purge_rate.draw LINE2
user_purge_rate.min 0
user_purge_rate.warning 10
");
}


## PHP OpCache Fragmentation
elsif($plugin eq 'fragmentation') {
print("multigraph php_opc_apcu$custom_name\_fragmentation
graph_title $custom_name OpCache Fragmentation
graph_args --base 1000 --upper-limit 100
graph_vlabel Percent
graph_category php-opcache
fragment_percentage.label Fragmentation Percent
fragment_percentage.draw LINE2
fragment_percentage.min 0
fragment_percentage.warning 10
");
}

## PHP OpCache Number of files in cache
elsif($plugin eq 'files') {
print("multigraph php_opc_apcu$custom_name\_files
graph_title $custom_name OpCache files
graph_args -l 0
graph_vlabel Number of Files
graph_category php-opcache
entries.label Number of files
entries.draw LINE2
entries.min 0
");
}

## PHP OpCache Rates
elsif($plugin eq 'rates') {
print("multigraph php_opc_apcu$custom_name\_rates
graph_title $custom_name OpCache  Hit, Miss and Insert Rates
graph_args --base 1000
graph_vlabel Cache Requests / Second
graph_category php-opcache
request_rate.label Request rate (Hits + Misses)
request_rate.draw LINE2
request_rate.min 0
hit_rate.label Hit rate
hit_rate.draw LINE2
hit_rate.min 0
miss_rate.label Miss rate
miss_rate.draw LINE2
miss_rate.min 0
insert_rate.label Insert rate
insert_rate.draw LINE2
insert_rate.min 0
");
}

## PHP OpCache User Cache Hit / Miss by percentage
elsif($plugin eq 'user_hit_miss') {
print("multigraph php_opc_apcu$custom_name\_user_hit_miss
graph_title $custom_name APCU Hits / Misses
graph_args --base 1000 --lower-limit 0 --upper-limit 100 --rigid
graph_vlabel Percent
graph_category php-opcache
graph_total Total
user_hits.label Hits
user_hits.draw AREA
user_hits.min 0
user_misses.label Misses
user_misses.draw STACK
user_misses.min 0
user_misses.warning 50
");
}

## PHP OpCache User Cache Number of entries in cache
elsif($plugin eq 'user_entries') {
print("multigraph php_opc_apcu$custom_name\_user_entries
graph_title $custom_name APCU Entries
graph_args -l 0
graph_vlabel Number of Entries
graph_category php-opcache
user_entries.label Number of entries
user_entries.draw LINE2
user_entries.min 0
");
}


## OpCache User Cache Rates
elsif($plugin eq 'user_rates') {
print("multigraph php_opc_apcu$custom_name\_user_rates
graph_title $custom_name APCU Hit, Miss and Insert Rates
graph_args --base 1000
graph_vlabel Cache Requests / Second
graph_category php-opcache
user_request_rate.label Request rate (Hits + Misses)
user_request_rate.draw LINE2
user_request_rate.min 0
user_hit_rate.label Hit rate
user_hit_rate.draw LINE2
user_hit_rate.min 0
user_miss_rate.label Miss rate
user_miss_rate.draw LINE2
user_miss_rate.min 0
user_insert_rate.label Insert rate
user_insert_rate.draw LINE2
user_insert_rate.min 0
");
}


exit 0;
}

foreach my $port (@PORTS)
{
  my $ua = LWP::UserAgent->new(timeout => 30,
             agent => sprintf("munin/%s (libwww-perl/%s)", $Munin::Common::Defaults::MUNIN_VERSION, $LWP::VERSION));

  my $url = sprintf $URL, $port;
  my $response = $ua->request(HTTP::Request->new('GET',$url));
  my $resp = $response->content;

  # Initializing and defining the array
  my @keymap = ( ['used:', 'used.value'],
                 ['free:', 'free.value'],
                 ['hits:', 'hits.value'],
                 ['misses:', 'misses.value'],
                 ['request_rate:', 'request_rate.value'],
                 ['hit_rate:', 'hit_rate.value'],
                 ['miss_rate:', 'miss_rate.value'],
                 ['insert_rate:', 'insert_rate.value'],
                 ['entries:', 'entries.value'],
                 ['inserts:', 'inserts.value'],
                 ['purges:', 'purges.value'],
                 ['purge_rate:', 'purge_rate.value'],
                 ['fragmented:', 'fragmented.value'],
                 ['fragment_segments:', 'fragment_segments.value'],
                 ['fragment_percentage:', 'fragment_percentage:'],
                 ['optcode_size:', 'optcode_size.value:'],
                 ['user_used:', 'user_used.value'],
                 ['user_free:', 'user_free.value'],
                 ['user_fragmented:', 'user_fragmented.value'],
                 ['user_fragment_segments:', 'user_fragment_segments.value'],
                 ['user_fragment_percentage:', 'user_fragment_percentage.value'],
                 ['user_size:', 'user_size.value'],
                 ['user_hits:', 'user_hits.value'],
                 ['user_misses:', 'user_misses.value'],
                 ['user_request_rate:', 'user_request_rate.value'],
                 ['user_hit_rate:', 'user_hit_rate.value'],
                 ['user_miss_rate:', 'user_miss_rate.value'],
                 ['user_insert_rate:', 'user_insert_rate.value'],
                 ['user_entries:', 'user_entries.value'],
                 ['user_inserts:', 'user_inserts.value'],
                 ['user_purges:', 'user_purges.value'],
                 ['user_purge_rate:', 'user_purge_rate.value']
               );
  my $rows = @keymap;
  for (my $i = 0; $i < $rows; $i++) {
    my $inkey = $keymap[$i][0];
    my $outkey = $keymap[$i][1];
    if ($resp =~ / \Q${inkey}\E\s+([0-9\.]+)/im) {
          print "$outkey $1\n";
      } else {
          print "$outkey U\n";
    }
  }
}

# vim:syntax=perl
